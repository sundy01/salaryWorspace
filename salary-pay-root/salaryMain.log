[2016-10-15 08:57:36.437 INFO ][AWT-EventQueue-0]ClassPathXmlApplicationContext.prepareRefresh(456) | Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4e00128a: startup date [Sat Oct 15 08:57:36 CST 2016]; root of context hierarchy
[2016-10-15 08:57:36.506 INFO ][AWT-EventQueue-0]XmlBeanDefinitionReader.loadBeanDefinitions(315) | Loading XML bean definitions from class path resource [datasourceConfig.xml]
[2016-10-15 08:57:37.020 INFO ][AWT-EventQueue-0]PropertyPlaceholderConfigurer.loadProperties(177) | Loading properties file from class path resource [jkMonitorTimer.properties]
[2016-10-15 08:57:37.058 INFO ][AWT-EventQueue-0]DefaultListableBeanFactory.preInstantiateSingletons(557) | Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@39ddfeb4: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,clotheProcessService,clotheStyleService,employeeInfoService,exportReportExcelService,payMoneyService,processFinishNumService,jdbcConfig,dataSource,statementHandlerInterceptor,sqlSessionFactory,org.mybatis.spring.mapper.MapperScannerConfigurer#0,txManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,clotheProcessDao,clotheStyleDao,payMoneyDao,processFinishNumDao,studentDao]; root of factory hierarchy
[2016-10-15 08:57:37.115 INFO ][AWT-EventQueue-0]MLog.<clinit>(80) | MLog clients using log4j logging.
[2016-10-15 08:57:37.471 INFO ][AWT-EventQueue-0]C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
[2016-10-15 08:57:38.220 INFO ][AWT-EventQueue-0]AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge1dc9j1iw7kpgmvripj|2990498c, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge1dc9j1iw7kpgmvripj|2990498c, idleConnectionTestPeriod -> 0, initialPoolSize -> 5, jdbcUrl -> jdbc:mysql://localhost:3306/jk_salary?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 300000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 30, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 10, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
[2016-10-15 08:57:38.548 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryCount  执行SQL:【select count(*) from jk_student】   执行时间:393ms
[2016-10-15 08:57:38.559 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryStudent  执行SQL:【select * from jk_student where 1=1 limit 0,20】   执行时间:7ms
[2016-10-15 08:57:38.714 INFO ][AWT-EventQueue-0]ClotheStylePanel.<init>(86) | 构建款面板
[2016-10-15 08:57:38.757 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:3ms
[2016-10-15 08:57:38.761 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:2ms
[2016-10-15 08:57:38.788 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode=''】   执行时间:2ms
[2016-10-15 08:57:38.803 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=】   执行时间:2ms
[2016-10-15 08:57:38.805 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId= limit 0,200】   执行时间:1ms
[2016-10-15 08:57:38.814 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:8ms
[2016-10-15 08:57:38.836 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 08:57:38.845 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:0ms
[2016-10-15 08:57:38.845 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:0ms
[2016-10-15 08:57:56.218 ERROR][AWT-EventQueue-0]ClotheStylePanel.mouseClicked(284) | 新增的款式名称不能为空!
[2016-10-15 08:58:02.473 ERROR][AWT-EventQueue-0]ClotheStylePanel.mouseClicked(284) | 新增的款式件数不能为空!
[2016-10-15 08:58:09.760 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.update  执行SQL:【update jk_clothe_style set `styleName`='1', `styleCode`='儿童', `styleNum`=1221, `updateDate`=now() where `id`=59】   执行时间:0ms
[2016-10-15 08:58:09.760 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.update  执行SQL:【update jk_clothe_style set `styleName`='1', `styleCode`=' 啊啊', `styleNum`=230, `updateDate`=now() where `id`=71】   执行时间:0ms
[2016-10-15 08:58:09.760 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.update  执行SQL:【update jk_clothe_style set `styleName`='啊啊', `styleCode`='多少度', `styleNum`=12, `updateDate`=now() where `id`=72】   执行时间:0ms
[2016-10-15 08:58:09.798 INFO ][AWT-EventQueue-0]XmlBeanDefinitionReader.loadBeanDefinitions(315) | Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
[2016-10-15 08:58:09.819 INFO ][AWT-EventQueue-0]SQLErrorCodesFactory.<init>(126) | SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase]
[2016-10-15 08:58:17.164 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.update  执行SQL:【update jk_clothe_style set `styleName`='1', `styleCode`='儿童', `styleNum`=1221, `updateDate`=now() where `id`=59】   执行时间:2ms
[2016-10-15 08:58:17.166 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.update  执行SQL:【update jk_clothe_style set `styleName`='1', `styleCode`=' 啊啊', `styleNum`=230, `updateDate`=now() where `id`=71】   执行时间:1ms
[2016-10-15 08:58:17.169 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.update  执行SQL:【update jk_clothe_style set `styleName`='啊啊', `styleCode`='多少度', `styleNum`=12, `updateDate`=now() where `id`=72】   执行时间:1ms
[2016-10-15 08:58:17.172 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.insert  执行SQL:【INSERT INTO jk_clothe_style (id,styleName, styleCode, styleNum, createDate, updateDate) VALUES (74,'阿是','多少度1',12,'2016-10-15 8:58:17','2016-10-15 8:58:17')】   执行时间:1ms
[2016-10-15 08:58:17.175 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:0ms
[2016-10-15 08:58:17.177 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:2ms
[2016-10-15 08:58:23.542 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 08:58:23.549 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:3ms
[2016-10-15 08:58:23.550 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:0ms
[2016-10-15 08:58:29.281 ERROR][AWT-EventQueue-0]ClotheProcessPanel.mouseClicked(265) | 新增的工序名称不能为空!
[2016-10-15 08:58:34.889 ERROR][AWT-EventQueue-0]ClotheProcessPanel.mouseClicked(265) | 输入的工序价格不能为空
[2016-10-15 08:58:41.127 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.insert  执行SQL:【INSERT INTO jk_clothe_process (id,styleId, processName, processPrice, createDate, updateDate) VALUES (1,59,'多少度',0.2300000000000000099920072216264088638126850128173828125,'2016-10-15 8:58:41','2016-10-15 8:58:41')】   执行时间:4ms
[2016-10-15 08:58:41.131 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:0ms
[2016-10-15 08:58:41.133 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:2ms
[2016-10-15 08:58:43.121 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:1ms
[2016-10-15 08:58:43.124 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:2ms
[2016-10-15 08:58:55.167 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 08:58:55.172 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:3ms
[2016-10-15 08:58:55.179 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:4ms
[2016-10-15 09:03:41.893 INFO ][AWT-EventQueue-0]ClassPathXmlApplicationContext.prepareRefresh(456) | Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4e00128a: startup date [Sat Oct 15 09:03:41 CST 2016]; root of context hierarchy
[2016-10-15 09:03:41.952 INFO ][AWT-EventQueue-0]XmlBeanDefinitionReader.loadBeanDefinitions(315) | Loading XML bean definitions from class path resource [datasourceConfig.xml]
[2016-10-15 09:03:42.363 INFO ][AWT-EventQueue-0]PropertyPlaceholderConfigurer.loadProperties(177) | Loading properties file from class path resource [jkMonitorTimer.properties]
[2016-10-15 09:03:42.394 INFO ][AWT-EventQueue-0]DefaultListableBeanFactory.preInstantiateSingletons(557) | Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@39ddfeb4: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,clotheProcessService,clotheStyleService,employeeInfoService,exportReportExcelService,payMoneyService,processFinishNumService,jdbcConfig,dataSource,statementHandlerInterceptor,sqlSessionFactory,org.mybatis.spring.mapper.MapperScannerConfigurer#0,txManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,clotheProcessDao,clotheStyleDao,payMoneyDao,processFinishNumDao,studentDao]; root of factory hierarchy
[2016-10-15 09:03:42.440 INFO ][AWT-EventQueue-0]MLog.<clinit>(80) | MLog clients using log4j logging.
[2016-10-15 09:03:42.703 INFO ][AWT-EventQueue-0]C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
[2016-10-15 09:03:43.462 INFO ][AWT-EventQueue-0]AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge1dc9j1iwfekzxzqhhp|2990498c, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge1dc9j1iwfekzxzqhhp|2990498c, idleConnectionTestPeriod -> 0, initialPoolSize -> 5, jdbcUrl -> jdbc:mysql://localhost:3306/jk_salary?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 300000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 30, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 10, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
[2016-10-15 09:03:43.760 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryCount  执行SQL:【select count(*) from jk_student】   执行时间:343ms
[2016-10-15 09:03:43.782 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryStudent  执行SQL:【select * from jk_student where 1=1 limit 0,20】   执行时间:22ms
[2016-10-15 09:03:43.881 INFO ][AWT-EventQueue-0]ClotheStylePanel.<init>(86) | 构建款面板
[2016-10-15 09:03:43.921 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:1ms
[2016-10-15 09:03:43.926 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:2ms
[2016-10-15 09:03:43.957 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode=''】   执行时间:1ms
[2016-10-15 09:03:43.970 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=】   执行时间:1ms
[2016-10-15 09:03:43.972 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId= limit 0,200】   执行时间:1ms
[2016-10-15 09:03:43.977 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:3ms
[2016-10-15 09:03:44.003 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:03:44.006 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:0ms
[2016-10-15 09:03:44.006 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:0ms
[2016-10-15 09:03:49.168 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:1ms
[2016-10-15 09:03:49.172 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:03:53.637 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 09:03:53.641 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:2ms
[2016-10-15 09:03:53.651 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:6ms
[2016-10-15 09:04:01.848 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode='儿童'】   执行时间:1ms
[2016-10-15 09:04:01.851 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=-1】   执行时间:1ms
[2016-10-15 09:04:01.853 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=-1 limit 0,200】   执行时间:1ms
[2016-10-15 09:04:01.858 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:3ms
[2016-10-15 09:04:02.587 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:2ms
[2016-10-15 09:04:02.592 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:3ms
[2016-10-15 09:04:02.602 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:6ms
[2016-10-15 09:04:03.648 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.getProcessBeanById  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and id=1】   执行时间:2ms
[2016-10-15 09:04:09.656 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.getProcessBeanById  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and id=1】   执行时间:1ms
[2016-10-15 09:04:09.677 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.insert  执行SQL:【INSERT INTO jk_process_finish (id,processId, employeeId, finishNum, createDate, updateDate) VALUES (1,1,118,123,'2016-10-15 9:04:09','2016-10-15 9:04:09')】   执行时间:3ms
[2016-10-15 09:04:09.684 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:1ms
[2016-10-15 09:04:09.687 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:1ms
[2016-10-15 09:04:09.690 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:04:09.690 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:0ms
[2016-10-15 09:04:09.690 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:0ms
[2016-10-15 09:04:09.707 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:17ms
[2016-10-15 09:04:12.215 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.getProcessBeanById  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and id=1】   执行时间:1ms
[2016-10-15 09:04:17.672 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.getProcessBeanById  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and id=1】   执行时间:1ms
[2016-10-15 09:04:17.676 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.update  执行SQL:【update jk_process_finish set `processId`=1, `finishNum`=123, `employeeId`=118, `updateDate`=now() where `id`=1】   执行时间:1ms
[2016-10-15 09:04:17.678 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.insert  执行SQL:【INSERT INTO jk_process_finish (id,processId, employeeId, finishNum, createDate, updateDate) VALUES (2,1,119,123,'2016-10-15 9:04:17','2016-10-15 9:04:17')】   执行时间:1ms
[2016-10-15 09:04:17.683 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:0ms
[2016-10-15 09:04:17.686 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:1ms
[2016-10-15 09:04:17.689 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:04:17.698 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:1ms
[2016-10-15 09:04:17.701 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:2ms
[2016-10-15 09:04:17.705 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:04:19.695 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode='儿童'】   执行时间:1ms
[2016-10-15 09:04:19.697 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=-1】   执行时间:1ms
[2016-10-15 09:04:19.699 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=-1 limit 0,200】   执行时间:1ms
[2016-10-15 09:04:19.702 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:04:21.178 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:2ms
[2016-10-15 09:04:21.185 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:4ms
[2016-10-15 09:04:21.192 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:5ms
[2016-10-15 09:04:23.023 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode='儿童'】   执行时间:2ms
[2016-10-15 09:04:23.025 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=-1】   执行时间:1ms
[2016-10-15 09:04:23.028 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=-1 limit 0,200】   执行时间:1ms
[2016-10-15 09:04:23.031 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:04:23.674 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:2ms
[2016-10-15 09:04:23.680 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:4ms
[2016-10-15 09:04:23.688 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:4ms
[2016-10-15 09:04:26.543 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode='儿童'】   执行时间:1ms
[2016-10-15 09:04:26.546 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=-1】   执行时间:1ms
[2016-10-15 09:04:26.547 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=-1 limit 0,200】   执行时间:1ms
[2016-10-15 09:04:26.551 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:3ms
[2016-10-15 09:04:27.122 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:2ms
[2016-10-15 09:04:27.128 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:3ms
[2016-10-15 09:04:27.136 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:5ms
[2016-10-15 09:04:33.879 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=1】   执行时间:1ms
[2016-10-15 09:04:33.882 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=1 limit 0,200】   执行时间:2ms
[2016-10-15 09:04:33.885 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:04:43.844 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 09:04:43.847 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:2ms
[2016-10-15 09:04:43.853 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:2ms
[2016-10-15 09:04:47.873 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.delete  执行SQL:【delete from jk_clothe_process where id=1】   执行时间:7ms
[2016-10-15 09:04:47.874 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.delete  执行SQL:【delete from jk_clothe_process where id=1】   执行时间:0ms
[2016-10-15 09:04:47.878 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:1ms
[2016-10-15 09:04:47.880 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:1ms
[2016-10-15 09:04:49.486 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:1ms
[2016-10-15 09:04:49.488 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:1ms
[2016-10-15 09:04:53.248 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:04:53.251 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:3ms
[2016-10-15 09:04:54.223 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:1ms
[2016-10-15 09:04:54.227 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:3ms
[2016-10-15 09:04:54.496 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:04:54.499 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:05:45.194 INFO ][AWT-EventQueue-0]ClassPathXmlApplicationContext.prepareRefresh(456) | Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7772e902: startup date [Sat Oct 15 09:05:45 CST 2016]; root of context hierarchy
[2016-10-15 09:05:45.253 INFO ][AWT-EventQueue-0]XmlBeanDefinitionReader.loadBeanDefinitions(315) | Loading XML bean definitions from class path resource [datasourceConfig.xml]
[2016-10-15 09:05:45.672 INFO ][AWT-EventQueue-0]PropertyPlaceholderConfigurer.loadProperties(177) | Loading properties file from class path resource [jkMonitorTimer.properties]
[2016-10-15 09:05:45.703 INFO ][AWT-EventQueue-0]DefaultListableBeanFactory.preInstantiateSingletons(557) | Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@717bd5c: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,clotheProcessService,clotheStyleService,employeeInfoService,exportReportExcelService,payMoneyService,processFinishNumService,jdbcConfig,dataSource,statementHandlerInterceptor,sqlSessionFactory,org.mybatis.spring.mapper.MapperScannerConfigurer#0,txManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,clotheProcessDao,clotheStyleDao,payMoneyDao,processFinishNumDao,studentDao]; root of factory hierarchy
[2016-10-15 09:05:45.750 INFO ][AWT-EventQueue-0]MLog.<clinit>(80) | MLog clients using log4j logging.
[2016-10-15 09:05:46.043 INFO ][AWT-EventQueue-0]C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
[2016-10-15 09:05:46.720 INFO ][AWT-EventQueue-0]AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge1dc9j1iwi1qejsc7yw|2b2f4529, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge1dc9j1iwi1qejsc7yw|2b2f4529, idleConnectionTestPeriod -> 0, initialPoolSize -> 5, jdbcUrl -> jdbc:mysql://localhost:3306/jk_salary?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 300000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 30, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 10, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
[2016-10-15 09:05:47.038 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryCount  执行SQL:【select count(*) from jk_student】   执行时间:366ms
[2016-10-15 09:05:47.048 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryStudent  执行SQL:【select * from jk_student where 1=1 limit 0,20】   执行时间:7ms
[2016-10-15 09:05:47.148 INFO ][AWT-EventQueue-0]ClotheStylePanel.<init>(86) | 构建款面板
[2016-10-15 09:05:47.196 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:1ms
[2016-10-15 09:05:47.201 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:3ms
[2016-10-15 09:05:47.223 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode=''】   执行时间:0ms
[2016-10-15 09:05:47.244 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=】   执行时间:0ms
[2016-10-15 09:05:47.244 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId= limit 0,200】   执行时间:0ms
[2016-10-15 09:05:47.244 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:0ms
[2016-10-15 09:05:47.278 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:3ms
[2016-10-15 09:05:47.285 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:0ms
[2016-10-15 09:05:47.285 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:0ms
[2016-10-15 09:05:56.768 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:4ms
[2016-10-15 09:05:56.773 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:2ms
[2016-10-15 09:05:56.779 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:2ms
[2016-10-15 09:06:05.927 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode='儿童'】   执行时间:1ms
[2016-10-15 09:06:05.930 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=-1】   执行时间:1ms
[2016-10-15 09:06:05.933 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=-1 limit 0,200】   执行时间:1ms
[2016-10-15 09:06:05.937 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:3ms
[2016-10-15 09:07:00.993 INFO ][AWT-EventQueue-0]ClassPathXmlApplicationContext.prepareRefresh(456) | Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4e00128a: startup date [Sat Oct 15 09:07:00 CST 2016]; root of context hierarchy
[2016-10-15 09:07:01.055 INFO ][AWT-EventQueue-0]XmlBeanDefinitionReader.loadBeanDefinitions(315) | Loading XML bean definitions from class path resource [datasourceConfig.xml]
[2016-10-15 09:07:01.460 INFO ][AWT-EventQueue-0]PropertyPlaceholderConfigurer.loadProperties(177) | Loading properties file from class path resource [jkMonitorTimer.properties]
[2016-10-15 09:07:01.514 INFO ][AWT-EventQueue-0]DefaultListableBeanFactory.preInstantiateSingletons(557) | Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@39ddfeb4: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,clotheProcessService,clotheStyleService,employeeInfoService,exportReportExcelService,payMoneyService,processFinishNumService,jdbcConfig,dataSource,statementHandlerInterceptor,sqlSessionFactory,org.mybatis.spring.mapper.MapperScannerConfigurer#0,txManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,clotheProcessDao,clotheStyleDao,payMoneyDao,processFinishNumDao,studentDao]; root of factory hierarchy
[2016-10-15 09:07:01.559 INFO ][AWT-EventQueue-0]MLog.<clinit>(80) | MLog clients using log4j logging.
[2016-10-15 09:07:01.805 INFO ][AWT-EventQueue-0]C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
[2016-10-15 09:07:02.465 INFO ][AWT-EventQueue-0]AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge1dc9j1iwjo8f1ociseo|2990498c, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge1dc9j1iwjo8f1ociseo|2990498c, idleConnectionTestPeriod -> 0, initialPoolSize -> 5, jdbcUrl -> jdbc:mysql://localhost:3306/jk_salary?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 300000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 30, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 10, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
[2016-10-15 09:07:02.786 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryCount  执行SQL:【select count(*) from jk_student】   执行时间:360ms
[2016-10-15 09:07:02.796 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryStudent  执行SQL:【select * from jk_student where 1=1 limit 0,20】   执行时间:8ms
[2016-10-15 09:07:02.898 INFO ][AWT-EventQueue-0]ClotheStylePanel.<init>(86) | 构建款面板
[2016-10-15 09:07:02.940 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:1ms
[2016-10-15 09:07:02.945 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:2ms
[2016-10-15 09:07:02.977 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode=''】   执行时间:1ms
[2016-10-15 09:07:02.992 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=】   执行时间:2ms
[2016-10-15 09:07:02.995 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId= limit 0,200】   执行时间:1ms
[2016-10-15 09:07:03.002 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:6ms
[2016-10-15 09:07:03.020 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:07:03.028 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:0ms
[2016-10-15 09:07:03.028 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:0ms
[2016-10-15 09:07:12.532 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 09:07:12.538 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:2ms
[2016-10-15 09:07:12.542 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:2ms
[2016-10-15 09:07:20.923 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 09:07:20.934 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:5ms
[2016-10-15 09:07:20.941 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:2ms
[2016-10-15 09:07:28.915 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.insert  执行SQL:【INSERT INTO jk_clothe_process (id,styleId, processName, processPrice, createDate, updateDate) VALUES (2,59,'啊啊啊',111,'2016-10-15 9:07:28','2016-10-15 9:07:28')】   执行时间:3ms
[2016-10-15 09:07:28.924 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:1ms
[2016-10-15 09:07:28.927 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:1ms
[2016-10-15 09:07:29.814 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:0ms
[2016-10-15 09:07:29.816 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:1ms
[2016-10-15 09:07:38.502 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode='儿童'】   执行时间:2ms
[2016-10-15 09:07:38.504 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=-1】   执行时间:1ms
[2016-10-15 09:07:38.506 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=-1 limit 0,200】   执行时间:1ms
[2016-10-15 09:07:38.509 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:07:39.385 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=2】   执行时间:2ms
[2016-10-15 09:07:39.391 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=2 limit 0,200】   执行时间:3ms
[2016-10-15 09:07:39.401 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:6ms
[2016-10-15 09:07:40.550 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.getProcessBeanById  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and id=2】   执行时间:1ms
[2016-10-15 09:07:46.222 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.getProcessBeanById  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and id=2】   执行时间:1ms
[2016-10-15 09:07:46.226 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.insert  执行SQL:【INSERT INTO jk_process_finish (id,processId, employeeId, finishNum, createDate, updateDate) VALUES (3,2,117,12,'2016-10-15 9:07:46','2016-10-15 9:07:46')】   执行时间:1ms
[2016-10-15 09:07:46.231 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=2】   执行时间:1ms
[2016-10-15 09:07:46.233 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=2 limit 0,200】   执行时间:1ms
[2016-10-15 09:07:46.237 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:07:46.246 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=2】   执行时间:1ms
[2016-10-15 09:07:46.248 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=2 limit 0,200】   执行时间:1ms
[2016-10-15 09:07:46.252 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:07:47.757 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=2】   执行时间:1ms
[2016-10-15 09:07:47.759 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId=2 limit 0,200】   执行时间:1ms
[2016-10-15 09:07:47.762 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:2ms
[2016-10-15 09:07:50.750 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:1ms
[2016-10-15 09:07:50.754 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:07:51.406 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:07:51.409 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:07:51.695 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:07:51.698 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:08:07.318 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:08:07.321 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:08:16.354 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.getClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 and id=59】   执行时间:3ms
[2016-10-15 09:08:16.358 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:2ms
[2016-10-15 09:08:16.363 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:3ms
[2016-10-15 09:08:19.706 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.delete  执行SQL:【delete from jk_clothe_process where id=2】   执行时间:1ms
[2016-10-15 09:08:19.707 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.deleteUserFinishNum  执行SQL:【delete from jk_process_finish where processId=2】   执行时间:1ms
[2016-10-15 09:08:19.717 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:1ms
[2016-10-15 09:08:19.719 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:0ms
[2016-10-15 09:08:21.189 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:1ms
[2016-10-15 09:08:21.191 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:1ms
[2016-10-15 09:08:22.229 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryCount  执行SQL:【select count(*) from jk_clothe_process where styleId=59】   执行时间:0ms
[2016-10-15 09:08:22.230 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBean  执行SQL:【SELECT id, styleId, ( SELECT styleName FROM jk_clothe_style a WHERE a.id=b.styleId) AS styleName, processName, processPrice, createDate, updateDate FROM jk_clothe_process b WHERE 1=1 and styleId=59 limit 0,20】   执行时间:1ms
[2016-10-15 09:08:26.877 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:1ms
[2016-10-15 09:08:26.879 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:1ms
[2016-10-15 09:08:37.132 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc】   执行时间:1ms
[2016-10-15 09:08:40.694 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:08:40.697 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:2ms
[2016-10-15 09:09:47.440 INFO ][AWT-EventQueue-0]ClassPathXmlApplicationContext.prepareRefresh(456) | Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7296e4a6: startup date [Sat Oct 15 09:09:47 CST 2016]; root of context hierarchy
[2016-10-15 09:09:47.501 INFO ][AWT-EventQueue-0]XmlBeanDefinitionReader.loadBeanDefinitions(315) | Loading XML bean definitions from class path resource [datasourceConfig.xml]
[2016-10-15 09:09:47.903 INFO ][AWT-EventQueue-0]PropertyPlaceholderConfigurer.loadProperties(177) | Loading properties file from class path resource [jkMonitorTimer.properties]
[2016-10-15 09:09:47.933 INFO ][AWT-EventQueue-0]DefaultListableBeanFactory.preInstantiateSingletons(557) | Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7214e339: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,clotheProcessService,clotheStyleService,employeeInfoService,exportReportExcelService,payMoneyService,processFinishNumService,jdbcConfig,dataSource,statementHandlerInterceptor,sqlSessionFactory,org.mybatis.spring.mapper.MapperScannerConfigurer#0,txManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,clotheProcessDao,clotheStyleDao,payMoneyDao,processFinishNumDao,studentDao]; root of factory hierarchy
[2016-10-15 09:09:47.978 INFO ][AWT-EventQueue-0]MLog.<clinit>(80) | MLog clients using log4j logging.
[2016-10-15 09:09:48.218 INFO ][AWT-EventQueue-0]C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
[2016-10-15 09:09:48.861 INFO ][AWT-EventQueue-0]AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge1dc9j1iwn8mtjzy59h|4347e0be, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge1dc9j1iwn8mtjzy59h|4347e0be, idleConnectionTestPeriod -> 0, initialPoolSize -> 5, jdbcUrl -> jdbc:mysql://localhost:3306/jk_salary?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 300000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 30, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 10, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
[2016-10-15 09:09:49.166 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryCount  执行SQL:【select count(*) from jk_student】   执行时间:345ms
[2016-10-15 09:09:49.190 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.queryStudent  执行SQL:【select * from jk_student where 1=1 limit 0,20】   执行时间:7ms
[2016-10-15 09:09:49.294 INFO ][AWT-EventQueue-0]ClotheStylePanel.<init>(86) | 构建款面板
[2016-10-15 09:09:49.338 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryCount  执行SQL:【select count(*) from jk_clothe_style where 1=1】   执行时间:1ms
[2016-10-15 09:09:49.343 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheStyleDao.queryClotheStyleBean  执行SQL:【select * from jk_clothe_style where 1=1 limit 0,20】   执行时间:2ms
[2016-10-15 09:09:49.370 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ClotheProcessDao.queryProcessBeanByStyleCode  执行SQL:【SELECT a.id, a.styleId, b.styleName, a.processName, a.processPrice, a.createDate, a.updateDate FROM jk_clothe_process a, jk_clothe_style b WHERE a.styleId=b.id AND b.styleCode=''】   执行时间:1ms
[2016-10-15 09:09:49.383 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryCount  执行SQL:【select count(*) from jk_process_finish where processId=】   执行时间:1ms
[2016-10-15 09:09:49.386 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.ProcessFinishNumDao.queryProcessFinishNumBean  执行SQL:【SELECT id, processId, employeeId, (select a.name from jk_student a where a.id=employeeId) as employeeName, finishNum, createDate, updateDate FROM jk_process_finish where 1=1 and processId= limit 0,200】   执行时间:2ms
[2016-10-15 09:09:49.390 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:3ms
[2016-10-15 09:09:49.414 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.StudentDao.loadAllStudent  执行SQL:【select * from jk_student where 1=1】   执行时间:1ms
[2016-10-15 09:09:49.428 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryCount  执行SQL:【select count(m.id) from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31'】   执行时间:2ms
[2016-10-15 09:09:49.431 INFO ][AWT-EventQueue-0]MybatisInterceptor.intercept(70) | 执行sql>>>com.sundy.dao.PayMoneyDao.queryPayMoneyBean  执行SQL:【select m.id, m.styleCode, m.styleId, m.employeeName, m.employeeId, m.processName, m.processPrice, m.finishNum, (m.processPrice * m.finishNum) as payMoney, m.createDate from ( SELECT a.id, (select c.id from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleId, (select c.styleCode from jk_clothe_process b,jk_clothe_style c where b.styleId=c.id and b.id=a.processId) as styleCode, (select t.name from jk_student t where t.id=a.employeeId) as employeeName, a.employeeId, (select b.processName from jk_clothe_process b where b.id=a.processId) as processName, (select b.processPrice from jk_clothe_process b where b.id=a.processId) as processPrice, a.finishNum, a.createDate FROM jk_process_finish a WHERE 1=1 ) m where 1=1 and date_format(m.createDate,'%Y-%m-%d')>='2016-10-01' and date_format(m.createDate,'%Y-%m-%d')<='2016-10-31' order by m.createDate desc limit 0,500】   执行时间:1ms
